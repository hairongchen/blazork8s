@using BlazorApp.Pages.Common.Metadata
@using BlazorApp.Pages.Event
@using BlazorApp.Utils
@using k8s.Models
@using k8s
@inherits BlazorApp.Pages.Common.DrawerPageBase<k8s.Models.V1Service>
@if (Item != null)
{
    <ServiceAction Item="Item" MenuMode="MenuMode.Horizontal"></ServiceAction>
    <Divider Orientation="left" Style="font-weight:bold">Metadata</Divider>
    <MetadataView Item="Item" T="V1Service"></MetadataView>
    <Divider Orientation="left" Style="font-weight:bold">Spec</Divider>
    <Descriptions Bordered Column="1">
        @if (Item.Spec.Selector != null)
        {
            <SelectorView Selector="@Item.Spec.Selector" Title="Selector"></SelectorView>
        }
        @if (Item.Spec.Type != null)
        {
            <DescriptionsItem Title="Type">
                <OptionsView Options='@(new[] { "ClusterIP", "NodePort", "ExternalName", "LoadBalancer" })' SelectOption="@Item.Spec.Type"></OptionsView>
                <KubectlExplainButton Field="service.spec.type"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.SessionAffinity != null)
        {
            <DescriptionsItem Title="SessionAffinity">
                <OptionsView Options='@(new[] { "ClusterIP", "None" })' SelectOption="@Item.Spec.SessionAffinity"></OptionsView>
                <KubectlExplainButton Field="service.spec.sessionAffinity"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.SessionAffinityConfig != null)
        {
            <DescriptionsItem Title="SessionAffinityConfig">
                <Tag Color=@RandomColorHelper.RandomColor()> @KubernetesJson.Serialize(Item.Spec.SessionAffinityConfig)</Tag>
                <KubectlExplainButton Field="service.spec.sessionAffinityConfig"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.IpFamilies != null)
        {
            <DescriptionsItem Title="IpFamilies">
                @foreach (var p in Item.Spec.IpFamilies)
                {
                    <Tag Color=@RandomColorHelper.RandomColor()>@p</Tag>
                }
                <KubectlExplainButton Field="service.spec.ipFamilies"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.IpFamilyPolicy != null)
        {
            <DescriptionsItem Title="IpFamilyPolicy">
                <OptionsView Options='@(new[] { "PreferDualStack", "RequireDualStack", "SingleStack" })' SelectOption="@Item.Spec.IpFamilyPolicy"></OptionsView>
                <KubectlExplainButton Field="service.spec.ipFamilyPolicy"></KubectlExplainButton>
            </DescriptionsItem>
        }

        @if (Item.Spec.HealthCheckNodePort != null)
        {
            <DescriptionsItem Title="HealthCheckNodePort">
                <Tag Color=@RandomColorHelper.RandomColor()>@Item.Spec.HealthCheckNodePort</Tag>
                <KubectlExplainButton Field="service.spec.healthCheckNodePort"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.ClusterIP != null)
        {
            <DescriptionsItem Title="ClusterIP">
                <Tag Color=@RandomColorHelper.RandomColor()>@Item.Spec.ClusterIP</Tag>
                <KubectlExplainButton Field="service.spec.clusterIP"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.ClusterIPs != null)
        {
            <DescriptionsItem Title="ClusterIPs">
                @foreach (var p in Item.Spec.ClusterIPs)
                {
                    <Tag Color=@RandomColorHelper.RandomColor()>@p</Tag>
                }
                <KubectlExplainButton Field="service.spec.clusterIPs"></KubectlExplainButton>
            </DescriptionsItem>
        }

        @if (Item.Spec.InternalTrafficPolicy != null)
        {
            <DescriptionsItem Title="InternalTrafficPolicy">
                <OptionsView Options='@(new[] { "Cluster", "Local" })' SelectOption="@Item.Spec.InternalTrafficPolicy"></OptionsView>
                <KubectlExplainButton Field="service.spec.internalTrafficPolicy"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.ExternalName != null)
        {
            <DescriptionsItem Title="ExternalName">
                <Tag Color=@RandomColorHelper.RandomColor()>@Item.Spec.ExternalName</Tag>
                <KubectlExplainButton Field="service.spec.externalName"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.ExternalIPs != null)
        {
            <DescriptionsItem Title="ClusterIPs">
                @foreach (var p in Item.Spec.ExternalIPs)
                {
                    <Tag Color=@RandomColorHelper.RandomColor()>@p</Tag>
                }
                <KubectlExplainButton Field="service.spec.externalIPs"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.ExternalTrafficPolicy != null)
        {
            <DescriptionsItem Title="ExternalTrafficPolicy">
                <OptionsView Options='@(new[] { "Cluster", "Local" })' SelectOption="@Item.Spec.ExternalTrafficPolicy"></OptionsView>
                <KubectlExplainButton Field="service.spec.externalTrafficPolicy"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.AllocateLoadBalancerNodePorts != null)
        {
            <DescriptionsItem Title="allocateLoadBalancerNodePorts">
                <Tag Color=@RandomColorHelper.RandomColor()>@Item.Spec.AllocateLoadBalancerNodePorts</Tag>
                <KubectlExplainButton Field="service.spec.allocateLoadBalancerNodePorts"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.LoadBalancerClass != null)
        {
            <DescriptionsItem Title="LoadBalancerClass">
                <Tag Color=@RandomColorHelper.RandomColor()>@Item.Spec.LoadBalancerClass</Tag>
                <KubectlExplainButton Field="service.spec.loadBalancerClass"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.LoadBalancerIP != null)
        {
            <DescriptionsItem Title="LoadBalancerIP">
                <Tag Color=@RandomColorHelper.RandomColor()>@Item.Spec.LoadBalancerIP</Tag>
                <KubectlExplainButton Field="service.spec.loadBalancerIP"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.LoadBalancerSourceRanges != null)
        {
            <DescriptionsItem Title="LoadBalancerSourceRanges">
                @foreach (var p in Item.Spec.LoadBalancerSourceRanges)
                {
                    <Tag Color=@RandomColorHelper.RandomColor()>@p</Tag>
                }
                <KubectlExplainButton Field="service.spec.loadBalancerSourceRanges"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.PublishNotReadyAddresses != null)
        {
            <DescriptionsItem Title="PublishNotReadyAddresses">
                <Tag Color=@RandomColorHelper.RandomColor()>@Item.Spec.PublishNotReadyAddresses</Tag>
                <KubectlExplainButton Field="service.spec.publishNotReadyAddresses"></KubectlExplainButton>
            </DescriptionsItem>
        }
        @if (Item.Spec.Ports != null)
        {
            <DescriptionsItem Title="Ports">
                @foreach (var p in Item.Spec.Ports)
                {
                    <div>
                        @($"{p.Name}:{p.Port}/{p.Protocol} ")
                        @if (p.NodePort != null)
                        {
                            <Tag Color="success">@p.NodePort</Tag>
                        }
                        @if (p.AppProtocol != null)
                        {
                            <Tag Color="@PresetColor.Blue.ToString()">@p.AppProtocol</Tag>
                        }
                        <Button Type="@ButtonType.Primary" OnClick="@(() => Forward(p))">Forward</Button>
                    </div>
                }
                <KubectlExplainButton Field="service.spec.ports"></KubectlExplainButton>
            </DescriptionsItem>
        }
    </Descriptions>
    <MiniEventListView Uid="@Item.Metadata.Uid"></MiniEventListView>
}
