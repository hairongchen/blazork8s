@using Mapster
@using BlazorApp.Pages.Common.Metadata
@using BlazorApp.Pages.Container
@using BlazorApp.Pages.Event
@using BlazorApp.Pages.Common.Html.HTable
@using BlazorApp.Pages.Common.Html
@using BlazorApp.Pages.Common
@using k8s.Models
@inherits BlazorApp.Pages.Common.DrawerPageBase<k8s.Models.V1PersistentVolumeClaim>
@if (PersistentVolumeClaim != null)
{
    <PersistentVolumeClaimAction Item="PersistentVolumeClaim" MenuMode="MenuMode.Horizontal"></PersistentVolumeClaimAction>
    <Divider Orientation="left" Style="font-weight:bold">Metadata</Divider>
    <MetadataView Item="PersistentVolumeClaim.Metadata" ExplainFieldPrefix="persistentVolumeClaim"></MetadataView>
    <Divider Orientation="left" Style="font-weight:bold">Spec</Divider>
    <HTable Bordered Column="1">

        <PropertyListView Title="AccessModes" Items="@PersistentVolumeClaim.Spec.AccessModes" ExplainField="persistentVolumeClaim.spec.accessModes" T="string"></PropertyListView>
        @if (PersistentVolumeClaim.Spec.DataSource != null)
        {
            <HTableColumn Title="DataSource">
                <RefView FullView="true" Ref="@(PersistentVolumeClaim.Spec.DataSource.Adapt<V1ObjectReference>())"></RefView>
            </HTableColumn>
        }
        @if (PersistentVolumeClaim.Spec.DataSourceRef != null)
        {
            <HTableColumn Title="DataSourceRef">
                <RefView FullView="true" Ref="@(PersistentVolumeClaim.Spec.DataSourceRef.Adapt<V1ObjectReference>())"></RefView>
            </HTableColumn>
        }

        <ContainerResourceRequestLimitsView RequestLimits="@(PersistentVolumeClaim.Spec.Resources.Adapt<V1ResourceRequirements>())" ExplainField="persistentVolumeClaim.spec.resources"></ContainerResourceRequestLimitsView>

        <LabelSelectorView Title="Selector" LabelSelector="@PersistentVolumeClaim.Spec.Selector" ExplainField="persistentVolumeClaim.spec.selector"></LabelSelectorView>
        <PropertySimpleView Title="StorageClassName" Item="@PersistentVolumeClaim.Spec.StorageClassName" ExplainField="persistentVolumeClaim.spec.storageClassName"></PropertySimpleView>
        <PropertySimpleView Title="VolumeName" Item="@PersistentVolumeClaim.Spec.VolumeName" ExplainField="persistentVolumeClaim.spec.volumeName"></PropertySimpleView>
        <PropertyOptionView Title="VolumeMode" Item="@PersistentVolumeClaim.Spec.VolumeMode" ExplainField="persistentVolumeClaim.spec.volumeMode" Options='@(new[] { "Block", "Filesystem" })'></PropertyOptionView>
    </HTable>
    <Divider Orientation="left" Style="font-weight:bold">Status</Divider>
    <HTable Bordered Column="1">
        <PropertyOptionView Title="Phase" Item="@PersistentVolumeClaim.Status.Phase" ExplainField="persistentVolumeClaim.status.phase" Options='@(new[] { "Bound", "Lost", "Pending" })'></PropertyOptionView>
        @if (PersistentVolumeClaim.Status.Conditions != null)
        {
            <ConditionsView Conditions="@(PersistentVolumeClaim.Status.Conditions.Adapt<IList<V1Condition>>())" ExplainField="persistentVolumeClaim.status.conditions"></ConditionsView>
        }
        <PropertyListView Title="AccessModes" Items="@PersistentVolumeClaim.Status.AccessModes" ExplainField="persistentVolumeClaim.status.accessModes" T="string"></PropertyListView>
        <PropertySimpleView Title="AllocatedResourceStatuses" Item="@PersistentVolumeClaim.Status.AllocatedResourceStatuses" ExplainField="persistentVolumeClaim.status.allocatedResourceStatuses" ShowInJson="true"></PropertySimpleView>
        <PropertySimpleView Title="AllocatedResources" Item="@PersistentVolumeClaim.Status.AllocatedResources" ExplainField="persistentVolumeClaim.status.allocatedResources" ShowInJson="true"></PropertySimpleView>

        <PropertyMapView Title="Capacity" Items="@PersistentVolumeClaim.Status.Capacity" ExplainField="persistentVolumeClaim.status.capacity" T="ResourceQuantity"></PropertyMapView>


    </HTable>
    <MiniEventListView Uid="@PersistentVolumeClaim.Metadata.Uid"></MiniEventListView>
}
