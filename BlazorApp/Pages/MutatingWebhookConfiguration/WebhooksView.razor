@using k8s.Models
@using BlazorApp.Pages.Common.Html.HTable
@using BlazorApp.Pages.Common.Metadata
@using BlazorApp.Pages.Common
@if (Webhooks is { Count: > 0 })
{
    @foreach (var hook in Webhooks)
    {
        <BadgeRibbon Text="@hook.Name" Placement="start" Color="#832">
            <Card Bordered>
                <HTable >
                    <PropertySimpleView Title=@L["Name"] Item="@hook.Name" ExplainField=@(ExplainFieldPrefix + ".name")></PropertySimpleView>
                    <PropertyListView Title="AdmissionReviewVersions" Items="@hook.AdmissionReviewVersions" ExplainField=@(ExplainFieldPrefix + ".admissionReviewVersions") T="string"></PropertyListView>
                    <PropertySimpleView Title="ClientConfig" Item="@hook.ClientConfig" ExplainField=@(ExplainFieldPrefix + ".clientConfig")>
                        @if (hook.ClientConfig != null)
                        {
                            <PropertySimpleView Title="CaBundle" Item="@hook.ClientConfig.CaBundle" ExplainField=@(ExplainFieldPrefix + ".clientConfig.caBundle") ShowInJson="true"></PropertySimpleView>
                            <PropertySimpleView Title="Url" Item="@hook.ClientConfig.Url" ExplainField=@(ExplainFieldPrefix + ".clientConfig.url")></PropertySimpleView>
                            @if (hook.ClientConfig.Service != null)
                            {
                                <PropertySimpleView Title="Service" Item="@hook.ClientConfig.Service" ExplainField=@(ExplainFieldPrefix + ".clientConfig.service")>
                                    @if (hook.ClientConfig.Service != null)
                                    {
                                        <RefView Ref="@GetRef(hook.ClientConfig.Service)" FullView="true"></RefView>
                                    }
                                </PropertySimpleView>
                                <PropertySimpleView Title="Path" Item="@hook.ClientConfig.Service.Path" ExplainField=@(ExplainFieldPrefix + ".clientConfig.service.path")></PropertySimpleView>
                                <PropertySimpleView Title="Port" Item="@hook.ClientConfig.Service.Port" ExplainField=@(ExplainFieldPrefix + ".clientConfig.service.port")></PropertySimpleView>
                            }
                        }
                    </PropertySimpleView>
                    <PropertyOptionView Title="FailurePolicy" Item="@hook.FailurePolicy" ExplainField=@(ExplainFieldPrefix + ".failurePolicy") Options="@(new[] { "Fail", "Ignore" })"></PropertyOptionView>
                    <PropertySimpleView Title="MatchConditions" Item="@hook.MatchConditions" ExplainField=@(ExplainFieldPrefix + ".matchConditions") ShowInJson="true"></PropertySimpleView>
                    <PropertyOptionView Title="MatchPolicy" Item="@hook.MatchPolicy" ExplainField=@(ExplainFieldPrefix + ".matchPolicy") Options="@(new[] { "Equivalent", "Exact" })"></PropertyOptionView>

                    <LabelSelectorView Title="NamespaceSelector" LabelSelector="@hook.NamespaceSelector"></LabelSelectorView>
                    <LabelSelectorView Title="ObjectSelector" LabelSelector="@hook.ObjectSelector"></LabelSelectorView>
                    <PropertyOptionView Title="ReInvocationPolicy" Item="@hook.ReinvocationPolicy" ExplainField=@(ExplainFieldPrefix + ".reinvocationPolicy") Options="@(new[] { "IfNeeded", "Never" })"></PropertyOptionView>
                    <RuleWithOperationsView Rules="@hook.Rules" ExplainFieldPrefix="@ExplainFieldPrefix"></RuleWithOperationsView>
                    <PropertyOptionView Title="SideEffects" Item="@hook.SideEffects" ExplainField=@(ExplainFieldPrefix + ".sideEffects") Options="@(new[] { "None", "NoneOnDryRun", "Unknown", "Some" })"></PropertyOptionView>
                    <PropertySimpleView Title="TimeoutSeconds" Item="@hook.TimeoutSeconds" ExplainField=@(ExplainFieldPrefix + ".timeoutSeconds")></PropertySimpleView>
                </HTable>
            </Card>
        </BadgeRibbon>
    }
}

@code {

    [Inject]
    public IStringLocalizer L { get; set; }

    [Parameter]
    public IList<V1MutatingWebhook> Webhooks { get; set; }

    [Parameter]
    public string ExplainFieldPrefix { get; set; }

    private V1ObjectReference GetRef(Admissionregistrationv1ServiceReference service)
    {
        var ret = new V1ObjectReference()
        {
            Kind              = "Service",
            Name              = service.Name,
            NamespaceProperty = service.NamespaceProperty,
        };


        return ret;
    }

}
