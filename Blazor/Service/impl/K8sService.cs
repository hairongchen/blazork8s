using System.Threading.Tasks;
using k8s;
using k8s.KubeConfigModels;
using Newtonsoft.Json;

namespace Blazor.Service.impl
{
    public class K8sService : IK8s
    {
        private IKubernetes                   _k8s;
        private KubernetesClientConfiguration _kcc;

        public IKubernetes k8s()
        {
            if (_k8s != null) return _k8s;

            var config = @"
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1EY3hPREF6TVRneE5Wb1hEVE14TURjeE5qQXpNVGd4TlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTTFoClRONFRSdWhwWlh1Nm03ZVVhcU0yTkpSaHZBNm9OOFY3TTEvampUM2dpM3pZMU92bmhHQkxWYlFWZDlJWldEbHQKUWdmbGx3bFV6WUVyOUtKdjNFR2pOcjZXT1Bra3doZzI4MGR0R2dnU0pqc2JLRFc3blVOYVord2s0ZXZzOFBuNApmd2tleDgyMDZycWJVOENxZ1NsdmZVZndKaC9UdmkzNzlMdkdhSzNRTkdkSno1Tnl6anJpZkdIdWNhM0trd00vCnZqeXR2U3U4aXArNXNmVmwwclhJUElOYnRoTDlJSFVrSzlkNkkzNFY4SHlJWXN6OFlmczVPRFhjSmVVSTNEYk4KTmZQakRCS2x6b2wvVTRzaUVWTjVWRFNRZlk5M0Foc29xL1NVM1VBN0xhWWxqQWdwLy8zRHRYTHd3YTVSeWptKwpIdkFLL0xjRU9wOEV0eWRvVUxVQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZLc2djQ2tEcE1GVExpbklGdlljNlR6V2ZrNHRNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBTFRZZW1QaEx3SmVvNVRKUWd5Wkllc1JocGJJZXJwL0hlNXh5ZE9aWG1OZGNpMmdqQgpZZldOTFl3eGhZeHh2SU9EcEttR2dFV3ZhVXRERnB5SFZzYzJNQUVSVTlCUkt6K2RnMnFScnl3VlA5cjQzQUZGCmhpNFFXeS91NW1NMmtwZzhIRG0zNUorWXBRejdGL1NiMGFvSWsxUUp3UTVYY1FrWXJZc0FyZ0N1YjVKbzYwajAKd1FIaVcvWE0yWWx3UG9Xak04QVlRdEUxamhmT0FxUkZmamNoeDdSZnhwcmlpbEZuYnR3TG5KSDhJZnlYeUFkNgpFTDA3NkZkalcvdjZjemZiSmhHL0Q1SXhMR04zZENCTUM5VnJEMjMyaDQvd1RBRnovSldFUWlEUU5CdjY2WlBuCjVSQ0hZWm1rbzI4VzZsYUw0M08ycFJXQjR5MXNYa3E2NDM4YwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    server: https://kubernetes.docker.internal:6443
  name: docker-desktop
contexts:
- context:
    cluster: docker-desktop
    user: docker-desktop
  name: docker-desktop
current-context: docker-desktop
kind: Config
preferences: {}
users:
- name: docker-desktop
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJekNDQWd1Z0F3SUJBZ0lJVlF1blhEcE5ESGt3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TVRBM01UZ3dNekU0TVRWYUZ3MHlNakE0TURZeE1EVXpNemRhTURZeApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sc3dHUVlEVlFRREV4SmtiMk5yWlhJdFptOXlMV1JsCmMydDBiM0F3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRE5oYUdoNS94NUpRb24KM2NweXJpcWxwcFZTVjFkdnNJOEttR0pIZk9JVU9KOHhQMXl0aFhSTFo4Mjc5OWlKOHhGU3JqM0pFZ29jZUcwUQpFOTZOcGtJS0YzQ2dvZEdTTExOOE52RE5vK050aDVNaDRpRXEvTXJvYitScjRTTU9jaERtWkJscGo0QU15L0FWCjU4bGozc3dmVkNlS0R4NU9WOWt4bTd0VkpFY2VmYlJTbld6Z3N5d2JkcHBCOWoyMkE1OFFzN3NLeUJySC8xS0QKSDRGNitqaW1FSjNNZ2JvTHU4eTlZK0NlUndaUFdCV0EwcGFramV1dDBwcTJiRkY5U0V0V20yMDFnUVVpVmtZdgpQbTFPZ0xYSUNadmVmWjdTVncyVEhHa3lxbUhBTXBRR2NSYUVTQ0JjTk1FNnpyRnVSdzBrNFlRQWgzSHVBOXRJCmZYLzZ3WVgxQWdNQkFBR2pWakJVTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZLc2djQ2tEcE1GVExpbklGdlljNlR6VwpmazR0TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCdWJ3SERlK2RXSXRVeHZ4dVVpalU5aUcvNW5BdUs4cUE1Cmp0eXBQNFlkeXA3WHk2SnBOZGpCVGt6UUpzT2Z1c0pZNm1YMWdSUHA4WWRaNTUvNnRuUWszQVkvbTJTcmQzdFcKV3JGNXNvTmgyQXkrdnZkdkU5aHBnMitaOWVQSzRhL1BodUhOaFVwSHlTaWZ5T0dDd2tGSklMTFREeHdRd2lKTAp1K3JxRGEwbW93VFNLUVRpTlVlcnFRbm0yOW0vWllqVjNuSklzS3BYek1KU2NwS3hxdTdyZjRWRUlNdFM0bXA1ClVWRXl3RU4yOExPNGJIcnJ2NURnWlVVSUxkVitSNWJOZHIyNGxEV2RqZUpYY1FMdjlUelJ4bmRtakxFSHpTUWQKZXorSXZIc09vSUVwRTVEcjd4N0ZBWnNzWmt1UDBRRTZJZ2dxbkYvRC9Ba1kwcml5UGNhNwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBellXaG9lZjhlU1VLSjkzS2NxNHFwYWFWVWxkWGI3Q1BDcGhpUjN6aUZEaWZNVDljCnJZVjBTMmZOdS9mWWlmTVJVcTQ5eVJJS0hIaHRFQlBlamFaQ0NoZHdvS0hSa2l5emZEYnd6YVBqYlllVEllSWgKS3Z6SzZHL2thK0VqRG5JUTVtUVphWStBRE12d0ZlZkpZOTdNSDFRbmlnOGVUbGZaTVp1N1ZTUkhIbjIwVXAxcwo0TE1zRzNhYVFmWTl0Z09mRUxPN0NzZ2F4LzlTZ3grQmV2bzRwaENkeklHNkM3dk12V1BnbmtjR1QxZ1ZnTktXCnBJM3JyZEthdG14UmZVaExWcHR0TllFRklsWkdMejV0VG9DMXlBbWIzbjJlMGxjTmt4eHBNcXBod0RLVUJuRVcKaEVnZ1hEVEJPczZ4YmtjTkpPR0VBSWR4N2dQYlNIMS8rc0dGOVFJREFRQUJBb0lCQVFERnNEZUVKRUNQU3RpVQo5bHNvcW0wdFA2bzhOUFZPNHRjRWl3VmwzRE1lM2tRS08vZHFsWWNDalV1dzlic2RIbWhZVG0veCs5OHIrWTUyCnU1WUVUSnNUVis2bkpHQVFxZHpQcTQwL1VOaVBYNnhnR0VKdE5oSDdPTDNRSXhQMGJqWGhWd0cycnlpdHBuRSsKc09EZnBzeFRpa0FxSlZheVp2L3RIdTQzL0poSU0waVBRRUVYQ3VKalBLWDYzRGhjMW94cFJNUjJJNy9tY0RWegpKb1pyUTVzd2hybTVlWjV0RVNjYjRMZWtmTjIxS1l5RHRxcmhKS1g5Z2tGTTFFQjZsZE8rZ2NnTUEzd3FYS1piCkNKcWRBb05ZREdJTExYQ2hxSzhPL1BXWjRCUElUdkpMZVcrZUYwVk5QK3ZidVFLSWpla0djV0RGa0ltTEt3RkEKdEFmZFhqMmhBb0dCQVAxV1VWWVRYQ3lpVFNTdEJoaFlheUsrS1lNdGMvd3hGZnQyWWwxSHNjY2dTQjFYNVQrSgpUazVsYitNMWRCZFdlNm9ma290VWJMNXJ0cmhBRy9tMlMyZ3R4c21kbHZzdTQ2UzlETFIyKzZjUm1SYnJubzltCnB6VE9TdFZPNUJERzNHcEV6cVoxWlBjK3pMeGw0d0Y2OElXZFp0cUU5NGhkOGVBYWEwZ3NXbHdOQW9HQkFNK3UKcHU2SVFTd282S1FpZ01HcEJVTVJRMVcrNE9hNHk3eG9BRlVBZ0JiVkVPZG9td2lDejZlZmo1N2x3Z1RLcUlGVwpKcG1KajlhQXY1NjJaL0NpRjdWeGxzcktjbVhOZzlKcEd4MnlwVU4rdGpyT0h4OTVLZnhpaXZ6RTdMc0JLY1l3CkIzeVdrOGR4TWhGK3k4Ull0dWIxOU5nRWhIT3JjbmJZbHluN0o0K0pBb0dBWE9TczJISXE1MWJ3RUpXOVdXbjYKaHZmUnd2OEV1NkhJSExmeEk2RXBhQW5IUjdNMkpaRVVmSnluWlZueFlxbGNtU29Ra3pSMjEzQXB4UEFGRWhDdApIOXRCUENhaitTRGRha2ZFQTl4cE5INjRjdlljNHhwU0Q0UGhYc3daeHFrVW80YnRlNDRxWXByTmVmdW1QS0cyCjFsZThJajZGZ2FScEQ3TEFTZXV4aW5VQ2dZQXVjYUJqTjVWYmlzcDc2anRoRTZ0WmxFSzZxalVoWTdJc01CWGkKN0htNG9XMW1VcjVZNk9nSFZHZUo0VmZDT28vMFhJL0ZSajRrZWlaZ0YrcW1wWmtudW44K1dvZTZ2SHIrVXdMOQpZVFlVSWdJZXBIblJVQWRUcWJYclVSNmZzMkxrTDFsOVF5OUpLc2RIb2xOdlZXZVJ2dTlDWDhBL0hkZzdPN1NTCmJ0Z3FBUUtCZ0NHemVJRjBUVzFmNWdMUjUwN3R5OVJlMWJYM3EzN2grM0ozYSs2RFFzWW5ibEcrRDNneVJjZ2cKUFB5RHB0S1RDNmVtNEhldEdKMWNmejgxL3c2Ny9vWUZIZWN2YmZvbXhxUm9LUEVHbmh6V09TUkJVM3lQMkVFcQpHWTdYblJEZkM0cmZNNy95akZzdXNaNDZMcjFKaHloYXNOUlVyd2ZhVkhoQTVWQjRNRXNBCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==";
            var k8SConfig = Yaml.LoadFromString<K8SConfiguration>(config);
            _kcc =
                KubernetesClientConfiguration.BuildConfigFromConfigObject(k8SConfig);
            _k8s = new Kubernetes(_kcc);
            return _k8s;
        }

        public async Task<string> GetResourceJson(string url)
        {
            return await k8s().HttpClient.GetStringAsync($"{_kcc.Host}{url}");
        }


        public async Task<T> GetFromJsonAsync<T>(string url)
        {
            var json = await GetResourceJson(url);
            return JsonConvert.DeserializeObject<T>(json);
        }
    }
}
